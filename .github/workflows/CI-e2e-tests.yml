name: zkVerify E2E Tests

on:
  workflow_dispatch:
    inputs:
      zkverify_version:
        description: "Commit hash or tag for zkVerify repository"
        required: true
        type: string
      attestation_bot_branch:
        description: "Branch for attestation bot"
        required: false
        type: string
        default: "main"
      zkv_contracts_branch:
        description: "Branch for zkv attestation contracts"
        required: false
        type: string
        default: "main"

  workflow_call:
    inputs:
      zkverify_version:
        description: "Commit hash or tag for zkVerify repository"
        required: true
        type: string
      attestation_bot_branch:
        description: "Branch for attestation bot"
        required: false
        type: string
        default: "main"
      zkv_contracts_branch:
        description: "Branch for zkv attestation contracts"
        required: false
        type: string
        default: "main"
    secrets:
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_TOKEN:
        required: true
      GH_TOKEN:
        required: true
      QA_SLACK_WEBHOOK_URL:
        required: true
env:
  NODE_VERSION: "20"

jobs:
  e2e-build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: HorizenLabs/zkVerify-qa
          ref: main
          clean: true
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Remove Existing node_modules
        run: rm -rf node_modules
        working-directory: src

      - name: Install npm Dependencies
        run: npm ci
        working-directory: src

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Sanitize zkVerify_version
        id: sanitize_version
        run: |
          # Determine the source of zkverify_version
          VERSION="${{ inputs.zkverify_version || github.event.inputs.zkverify_version }}"

          # Replace '/' with '-' and remove any other invalid characters for Docker tags
          SANITIZED_VERSION=$(echo "$VERSION" | tr '/' '-' | sed 's/[^a-zA-Z0-9_.-]/-/g')

          # Ensure the tag starts with a letter or number
          SANITIZED_VERSION=$(echo "$SANITIZED_VERSION" | sed 's/^[^a-zA-Z0-9]/0&/')

          # Truncate to 128 characters (Docker tag length limit)
          SANITIZED_VERSION="${SANITIZED_VERSION:0:128}"

          echo "SANITIZED_ZKVERIFY_VERSION=${SANITIZED_VERSION}" >> $GITHUB_ENV
          echo "Sanitized zkverify_version: $SANITIZED_VERSION"

      - name: Run Setup Script (Clone Repositories & Build Docker Image)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          IMAGE_TAG: ${{ env.SANITIZED_ZKVERIFY_VERSION }}
        run: |
          ./setup.sh --fetch-latest --rebuild \
            --zkverify-branch ${{ inputs.zkverify_version || github.event.inputs.zkverify_version}} \
            --nh-attestation-bot-branch ${{ inputs.attestation_bot_branch || github.event.inputs.attestation_bot_branch }} \
            --zkv-attestation-contracts-branch ${{ inputs.zkv_contracts_branch || github.event.inputs.zkv_contracts_branch }}
        working-directory: src/e2e-tests

      - name: Set Up Docker Containers
        run: |
          docker compose down -v
          ZKVERIFY_IMAGE_TAG=${{ env.SANITIZED_ZKVERIFY_VERSION }} docker compose build --no-cache
          ZKVERIFY_IMAGE_TAG=${{ env.SANITIZED_ZKVERIFY_VERSION }} docker compose up -d
        working-directory: src/e2e-tests

      - name: Wait for Ethereum contract to be deployed
        run: |
          MAX_WAIT_TIME=300
          wait_time=0
          while true; do
            if docker compose exec -T anvil-node test -f /data/contract_data.txt; then
              CONTRACT_ADDRESS=$(docker compose exec -T anvil-node sh -c "sed -n '1p' /data/contract_data.txt | cut -d ' ' -f 3")
              if [ ! -z "$CONTRACT_ADDRESS" ]; then
                echo "Contract data is ready."
                echo "ZKV_CONTRACT=$CONTRACT_ADDRESS" >> $GITHUB_ENV
                break
              fi
            fi
            if [ "$wait_time" -ge "$MAX_WAIT_TIME" ]; then
              echo "Timeout reached: contract data file is not ready."
              exit 1
            fi
            echo "Waiting for contract data file to be ready..."
            sleep 3
            wait_time=$((wait_time + 3))
          done
        working-directory: src/e2e-tests

      - name: Run E2E tests
        id: run_tests
        run: |
          mkdir -p reports
          npm --prefix ../../ run test:e2e 2>&1 | tee reports/test_output.txt
        working-directory: src/e2e-tests

      - name: Parse Test Results
        run: |
          TEST_OUTPUT=$(cat reports/test_output.txt)

          PASSED=0
          FAILED=0
          SKIPPED=0
          TOTAL=0

          if echo "$TEST_OUTPUT" | grep -q 'Tests:'; then
              PASSED=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="passed,") print $(i-1)}')
              FAILED=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="failed,") print $(i-1)}')
              SKIPPED=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="skipped,") print $(i-1)}')
              TOTAL=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="total") print $(i-1)}')
          fi

          PASSED=${PASSED:-0}
          FAILED=${FAILED:-0}
          SKIPPED=${SKIPPED:-0}
          TOTAL=${TOTAL:-0}

          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV

          if [ "$FAILED" -eq 0 ]; then
            OVERALL_STATUS="success"
            OVERALL_STATUS_EMOJI=":large_green_circle:"
          else
            OVERALL_STATUS="failure"
            OVERALL_STATUS_EMOJI=":red_circle:"
          fi

          echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_ENV
          echo "OVERALL_STATUS_EMOJI=$OVERALL_STATUS_EMOJI" >> $GITHUB_ENV

          if [ "$OVERALL_STATUS" == "failure" ]; then
            exit 1
          fi
        working-directory: src/e2e-tests

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.OVERALL_STATUS_EMOJI }} *zkVerify E2E (Local) TEST STATUS:* ${{ env.OVERALL_STATUS }} ${{ env.OVERALL_STATUS_EMOJI }}\n*Test Results:*\n*Passed:* ${{ env.PASSED }}\n*Failed:* ${{ env.FAILED }}\n*Skipped:* ${{ env.SKIPPED }}\n*Total:* ${{ env.TOTAL }}\n\n*Build URL:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here to view the build>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.QA_SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Cleanup Docker resources
        if: always()
        run: |
          echo "Cleaning up Docker resources..."
          docker compose -f docker-compose.yml down -v
          docker container prune -f
          docker network prune -f
          docker volume prune -f
          docker image prune -a -f
          echo "Checking disk space..."
          df -h
          echo "Listing remaining Docker resources..."
          docker ps -a
          docker network ls
          docker volume ls
          docker images
        working-directory: src/e2e-tests
