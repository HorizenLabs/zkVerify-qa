name: zkVerify E2E Tests

on:
  workflow_dispatch:
    inputs:
      zkverify_tag:
        description: "Docker image tag for zkverify"
        default: "latest"
      zkverify_branch:
        description: "Branch for zkVerify repository"
        default: "main"
      attestation_bot_branch:
        description: "Branch for attestation bot"
        default: "main"
      zkv_contracts_branch:
        description: "Branch for zkv attestation contracts"
        default: "main"

  workflow_call:
    inputs:
      zkverify_tag:
        description: "Docker image tag for zkverify"
        required: false
        type: string
        default: "latest"
      zkverify_branch:
        description: "Branch for zkVerify repository"
        required: false
        type: string
        default: "main"
      attestation_bot_branch:
        description: "Branch for attestation bot"
        required: false
        type: string
        default: "main"
      zkv_contracts_branch:
        description: "Branch for zkv attestation contracts"
        required: false
        type: string
        default: "main"

env:
  NODE_VERSION: "18"

jobs:
  e2e-build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Run setup script (git clone latest zkVerify & attestation-bot repos)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          ./setup.sh --fetch-latest \
            --zkverify-branch ${{ github.event.inputs.zkverify_branch || inputs.zkverify_branch }} \
            --nh-attestation-bot-branch ${{ github.event.inputs.attestation_bot_branch || inputs.attestation_bot_branch }} \
            --zkv-attestation-contracts-branch ${{ github.event.inputs.zkv_contracts_branch || inputs.zkv_contracts_branch }}
        working-directory: src/e2e-tests

      - name: Install npm dependencies
        run: npm ci
        working-directory: src

      - name: Set up Docker containers
        run: |
          docker compose down -v
          ZKVERIFY_IMAGE_TAG=${{ github.event.inputs.zkverify_tag || inputs.zkverify_tag }} docker compose build --no-cache
          ZKVERIFY_IMAGE_TAG=${{ github.event.inputs.zkverify_tag || inputs.zkverify_tag }} docker compose up -d
        working-directory: src/e2e-tests

      - name: Wait for Ethereum contract to be deployed
        run: |
          MAX_WAIT_TIME=300
          wait_time=0
          while true; do
            if docker compose exec -T anvil-node test -f /data/contract_data.txt; then
              CONTRACT_ADDRESS=$(docker compose exec -T anvil-node sh -c "sed -n '1p' /data/contract_data.txt | cut -d ' ' -f 3")
              if [ ! -z "$CONTRACT_ADDRESS" ]; then
                echo "Contract data is ready."
                echo "ZKV_CONTRACT=$CONTRACT_ADDRESS" >> $GITHUB_ENV
                break
              fi
            fi
            if [ "$wait_time" -ge "$MAX_WAIT_TIME" ]; then
              echo "Timeout reached: contract data file is not ready."
              exit 1
            fi
            echo "Waiting for contract data file to be ready..."
            sleep 3
            wait_time=$((wait_time + 3))
          done
        working-directory: src/e2e-tests

      - name: Wait 30 seconds for everything to initialize
        run: sleep 30
        working-directory: src/e2e-tests

      - name: Check running services
        run: |
          docker compose ps
        working-directory: src/e2e-tests

      - name: Check attestation bot logs
        run: |
          docker compose logs attestation-bot
        working-directory: src/e2e-tests

      - name: Run E2E tests
        id: run_tests
        run: |
          mkdir -p reports
          npm --prefix ../../ run test:e2e 2>&1 | tee reports/test_output.txt
        working-directory: src/e2e-tests

      - name: Parse Test Results
        run: |
          TEST_OUTPUT=$(cat reports/test_output.txt)

          PASSED=0
          FAILED=0
          SKIPPED=0
          TOTAL=0

          if echo "$TEST_OUTPUT" | grep -q 'Tests:'; then
              PASSED=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="passed,") print $(i-1)}')
              FAILED=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="failed,") print $(i-1)}')
              SKIPPED=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="skipped,") print $(i-1)}')
              TOTAL=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="total") print $(i-1)}')
          fi

          PASSED=${PASSED:-0}
          FAILED=${FAILED:-0}
          SKIPPED=${SKIPPED:-0}
          TOTAL=${TOTAL:-0}

          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV

          if [ "$FAILED" -eq 0 ]; then
            OVERALL_STATUS="success"
            OVERALL_STATUS_EMOJI=":large_green_circle:"
          else
            OVERALL_STATUS="failure"
            OVERALL_STATUS_EMOJI=":red_circle:"
          fi

          echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_ENV
          echo "OVERALL_STATUS_EMOJI=$OVERALL_STATUS_EMOJI" >> $GITHUB_ENV

          if [ "$OVERALL_STATUS" == "failure" ]; then
            exit 1
          fi
        working-directory: src/e2e-tests

      # - name: Send Slack Notification
      #   if: always()
      #   uses: slackapi/slack-github-action@v1.25.0
      #   with:
      #     payload: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "${{ env.OVERALL_STATUS_EMOJI }} *zkVerify E2E (Local) TEST STATUS:* ${{ env.OVERALL_STATUS }} ${{ env.OVERALL_STATUS_EMOJI }}\n*Test Results:*\n*Passed:* ${{ env.PASSED }}\n*Failed:* ${{ env.FAILED }}\n*Skipped:* ${{ env.SKIPPED }}\n*Total:* ${{ env.TOTAL }}\n\n*Build URL:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here to view the build>"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.QA_SLACK_WEBHOOK_URL }}
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
